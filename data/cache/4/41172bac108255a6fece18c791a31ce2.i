a:65:{i:0;a:3:{i:0;s:14:"document_start";i:1;a:0:{}i:2;i:0;}i:1;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:28:"Node.JS 그리고 JavaScript";i:1;i:1;i:2;i:1;}i:2;i:1;}i:2;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:1;}i:2;i:1;}i:3;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:46;}i:4;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:22:"JSONP란 무엇인가?";i:1;i:2;i:2;i:46;}i:2;i:46;}i:5;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:46;}i:6;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:20:""JSON with Padding"
";}i:2;i:81;}i:7;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:81;}i:8;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:403:"자바스크립트에서 서로 다른 도메인 간의 데이터 요청을 위한 통신 기법. 평소 이것은 same-origin-policy에 의하여 웹브라우저 차원에서 금지하고 있다. JSONP는 브라우저가 <script> 에서 same-origin policy를 강요하지 않는 것을 이용한 것이다. <script> 태그를 활용하는 것이므로, 이것은 GET요청에 대해서만 유효하다.";}i:2;i:107;}i:9;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:510;}i:10;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:512;}i:11;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:18:"Callback의 지옥";i:1;i:2;i:2;i:512;}i:2;i:512;}i:12;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:512;}i:13;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:14:"Callback Hell
";}i:2;i:542;}i:14;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:542;}i:15;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:80:"이것은 간단히 아래의 코드형태로 인한 문제를 말하는 것임.";}i:2;i:562;}i:16;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:643;}i:17;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:126:"$.ajax({
  url:"",
  data:"",
})
.done({
  $.ajax({
    url:"",
    data:"",
  })
  .done({
    $.ajax({
      ...
    })
});
";}i:2;i:643;}i:18;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:643;}i:19;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:166:"위와 같은 형태의 코드는 로직의 동작 흐름을 직관적으로 볼 수 없게 하는데, 이것은 아래와 같은 여러가지 문제를 유발한다.";}i:2;i:801;}i:20;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:967;}i:21;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:967;}i:22;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:967;}i:23;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:967;}i:24;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:" 코드 가독성 저하";}i:2;i:973;}i:25;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:997;}i:26;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:997;}i:27;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:2;}i:2;i:997;}i:28;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:997;}i:29;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:27:" 디버깅 난이도 상승";}i:2;i:1003;}i:30;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1030;}i:31;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1030;}i:32;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:2;}i:2;i:1030;}i:33;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1030;}i:34;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:27:" 예외 처리의 어려움";}i:2;i:1036;}i:35;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1063;}i:36;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1063;}i:37;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:1063;}i:38;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1063;}i:39;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:43:"위의 문제를 해결 하기 위해서는";}i:2;i:1065;}i:40;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"...";}i:2;i:1108;}i:41;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:0:"";}i:2;i:1111;}i:42;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1112;}i:43;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:1112;}i:44;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:1112;}i:45;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1112;}i:46;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:96:" 모듈화 - 익명 함수의 사용을 지양하고 함수를 따로 선언하여 활용하자.";}i:2;i:1117;}i:47;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1213;}i:48;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1213;}i:49;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:1213;}i:50;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1213;}i:51;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:46:" Promise Pattern의 활용 - 더 찾아볼것.";}i:2;i:1218;}i:52;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1264;}i:53;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1264;}i:54;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:1264;}i:55;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1264;}i:56;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:89:" 코드를 얕게 하기. - 하나의 함수가 수행하는 역할을 최소화 할 것.";}i:2;i:1269;}i:57;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1358;}i:58;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1358;}i:59;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:1358;}i:60;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1358;}i:61;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:99:"WaterfallJS 등은 비동기적인 함수의 호출을 동기적으로 수행할 수 있게 한다.";}i:2;i:1360;}i:62;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1459;}i:63;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1459;}i:64;a:3:{i:0;s:12:"document_end";i:1;a:0:{}i:2;i:1459;}}