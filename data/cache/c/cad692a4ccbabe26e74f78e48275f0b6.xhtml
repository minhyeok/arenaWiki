
<h1 class="sectionedit1" id="nosql_이야기">NoSQL 이야기.</h1>
<div class="level1">

<p>
이 역시 NoSQL 을 써먹어보면서 두서없이 적는 내용들입니다.
</p>

</div>
<!-- EDIT1 SECTION "NoSQL 이야기." [1-112] -->
<h2 class="sectionedit2" id="cap이론">CAP이론</h2>
<div class="level2">

<p>
<a href="/dokuwiki/lib/exe/detail.php?id=nosql_%EC%9D%B4%EC%95%BC%EA%B8%B0&amp;media=cap_theory.png" class="media" title="cap_theory.png"><img src="/dokuwiki/lib/exe/fetch.php?media=cap_theory.png" class="media" alt="" /></a>
</p>
<ul>
<li class="level1"><div class="li"> <strong>C</strong>onsistency - <strong>일관성</strong> : 모든 노드가 같은 순간에 같은 데이터를 볼 수 있다.</div>
</li>
<li class="level1"><div class="li"> <strong>A</strong>vailability - <strong>가용성</strong> : 모든 요청이 성공/ 실패 결과를 반환할 수 있다.</div>
</li>
<li class="level1"><div class="li"> <strong>P</strong>artition tolerance - <strong>분할내성</strong> : 메시지 전달이 실패하거나 시스템이 망가져도 시스템이 동작한다.</div>
</li>
</ul>

<p>
 <strong>CAP 이론<sub>혹은 정리</sub></strong> 은 분산 컴퓨터 시스템 가운데 위의 세가지 조건을 모두 만족하는 시스템은 존재하지 않음을 증명한 정리이다.
</p>

<p>
예를들어, 대부분의 RDBMS (예를 들어, MySQL)들이 CA 속성을 준수하는 가운데, 요청에 즉시 응답하고 동시적 요청에 같은 데이터를 보여준다면, 이 시스템을 분산적으로 처리하긴 쉽지 않은 것이 사실.
</p>

</div>
<!-- EDIT2 SECTION "CAP이론" [113-] -->